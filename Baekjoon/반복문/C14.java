/* 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 
 * 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다.
 * 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. / 6+8 = 14이다. 새로운 수는 84이다. / 8+4 = 12이다. 새로운 수는 42이다. /
 * 4+2 = 6이다. 새로운 수는 26이다. 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.
 * 입력 : 26	-> 출력 : 4	/ 입력 : 55	-> 출력 : 3	/ 입력 : 1	-> 출력 : 60	/ 입력 : 0	-> 출력 : 1	*/
import java.util.Scanner;

public class C14 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		sc.close();
		
		int result = 0;	//반복문에서 계산 값 넣어줄 변수
		int sum = 0;	//계산 횟수 세어줄 변수
		int num1 = 0;	//일의 자리 넣을 변수 -> 오른쪽 자리 수
		int num2 = 0;	//일의 자리와 십의 자리의 합 넣어줄 변수
		int x = N;		//N값이 바뀌지 않게 대신 계산될 변수
		
		//입력값이 0일 경우를 대비해 한번은 출력하고 종료하기 위한 do while 반복문
		do {
			num1 = x % 10;			//일의 자리
			num2 = x / 10 + x % 10;	//일의 자리와 십의 자리 합
			
			//일의 자리와 십의 자리 합이 10이 넘어갈 경우 다시 일의 자리만 가져오기
			if(num2 > 9) {	
				num2 = num2 % 10;
			}
			
			//일의 자리를 십의 자리로, 일의 자리와 십의 자리 합을 일의 자리로
			result = num1*10 + num2;
			//다시 계산할 값x에 앞서 계산한 값 넣어주기
			x = result;	
			//계산 할 때 마다 계산 횟수 세줌
			sum++;	
		} while(result != N);	//계산한 result값이 입력값과 같아진다면 반복문 종료 -> 다르면 계속 반복
		
		//출력
		System.out.println(sum);
		
	}

}
